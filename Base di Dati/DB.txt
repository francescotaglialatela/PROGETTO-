CREATE TABLE STUDENTE(
	idStudente int PRIMARY KEY,
	Nome varchar(40) NOT NULL,
	Cognome varchar(40) NOT NULL,
	Username varchar(30) NOT NULL,
	Password varchar(16) NOT NULL,
	Sesso char(1) NOT NULL,
	DataN date
);

CREATE TABLE INSEGNANTE(
	idInsegnante int PRIMARY KEY,
	Nome varchar(40) NOT NULL,
	Cognome varchar(40) NOT NULL,
	Username varchar(30) NOT NULL,
	Password varchar(16) NOT NULL,
	Sesso char(1) NOT NULL,
	DataN date
);

CREATE TABLE TEST(
	idTest int PRIMARY KEY,
	Insegnante int,
	NomeTest varchar(30) NOT NULL,
	Punteggio real,
	VisionaPunteggio boolean NOT NULL default FALSE,
	
	FOREIGN KEY(Insegnante) REFERENCES INSEGNANTE(idInsegnante)
);

CREATE TABLE QUIZ_M(
	idQuizM int PRIMARY KEY,
	Domanda varchar(200) NOT NULL,
	RispostaC char(1) NOT NULL,
	PuntC real,
	puntS real
);

CREATE TABLE ELENCO_OPZIONI(
	idQuizM int,
	Opzione char(1) NOT NULL,
	TestoOpzione varchar(200) NOT NULL,
	
	FOREIGN KEY(idQuizM) REFERENCES QUIZ_M(idQuizM)
);

CREATE TABLE QUIZ_A(
	idQuizA int PRIMARY KEY,
	Domanda varchar(200) NOT NULL,
	PuntMax real,
	PuntMin real
);

CREATE TABLE RISPOSTE(
	Studente int,
	Insegnante int,
	idQuizA int,
	idQuizM int,
	idTest int,
	RispostaA varchar(300),
	RispostaM char(1),
	VerificaCorrezione boolean NOT NULL default FALSE,
	PunteggioAssegnato real default 0,
	PuntiQM real default 0,
	
	FOREIGN KEY(Studente) REFERENCES STUDENTE(idStudente),
	FOREIGN KEY(Insegnante) REFERENCES INSEGNANTE(idInsegnante),
	FOREIGN KEY(idQuizA) REFERENCES QUIZ_A(idQuizA),
	FOREIGN KEY(idQuizM) REFERENCES QUIZ_M(idQuizM),
	FOREIGN KEY(idTest) REFERENCES TEST(idTest)
);

CREATE TABLE COMPOSTO_DA_QM(
	idQuizM int,
	idTest int,
	
	FOREIGN KEY(idQuizM) REFERENCES QUIZ_M(idQuizM),
	FOREIGN KEY(idTest) REFERENCES TEST(idTest)
);

CREATE TABLE COMPOSTO_DA_QA(
	idQuizA int,
	idTest int,
	
	FOREIGN KEY(idQuizA) REFERENCES QUIZ_A(idQuizA),
	FOREIGN KEY(idTest) REFERENCES TEST(idTest)
);

ALTER TABLE STUDENTE
ADD CONSTRAINT c_sesso_s
CHECK (Sesso='M' OR Sesso='F');

ALTER TABLE INSEGNANTE
ADD CONSTRAINT c_sesso_i
CHECK (Sesso='M' OR Sesso='F');

ALTER TABLE ELENCO_OPZIONI
ADD CONSTRAINT c_uniq_op
UNIQUE(idQuizM,Opzione);

ALTER TABLE QUIZ_M
ADD CONSTRAINT c_ptC
CHECK (PuntC>0);

ALTER TABLE QUIZ_A
ADD CONSTRAINT c_ptMax
CHECK (PuntMax>0);

ALTER TABLE TEST
ADD CONSTRAINT CQ
UNIQUE(idTest,NomeTest,Insegnante);

CREATE VIEW ELENCO_TEST AS
SELECT idTest, NomeTest,Insegnante
FROM TEST;

create view test_corretti as
SELECT nomeTest, studente,visionapunteggio
from test as t, risposte as r
where  t.idTest=R.idTest and r.VerificaCorrezione=TRUE;

CREATE VIEW ELENCO_RISPOSTE_STUDENTE AS
SELECT NOMETEST,STUDENTE,RISPOSTAA,VERIFICACORREZIONE
FROM RISPOSTE as r,TEST as t,Composto_da_qa as cdq
WHERE R.idTest=T.idTest and R.idTest=cdq.idTest and
	cdq.idQuizA=R.idQuizA;

CREATE VIEW COMPOSIZIONE_TEST AS
SELECT T.NOMETEST,CDQ.idQuizM,CDA.idQuizA
FROM TEST AS T, COMPOSTO_DA_QM AS CDQ, COMPOSTO_DA_QA AS CDA
WHERE T.idTest=CDQ.idTest and CDA.idTest=T.idTest;


CREATE VIEW VISTA_APPOGGIO AS
SELECT R.Studente,R.VerificaCorrezione,R.RispostaA,R.idQuizA,T.NomeTest
from RISPOSTE AS R,COMPOSTO_DA_QA AS QA,Studente as S,Test as T
where R.Studente=S.idStudente and R.idTest=QA.idTest and 
	R.idQuizA = QA.idQuizA and T.idTest=R.idTest;

create view appoggio_trigger as
 SELECT r.idquizm,
    r.studente,
    r.puntiqm,
    r.rispostam,
    qm.puntc,
    qm.punts,
    qm.rispostac
   FROM risposte r,
    quiz_m qm
  WHERE r.idquizm = qm.idquizm;

--TRIGGER CHE VERIFICA LA CORREZIONE AUTOMATICA DELLE RISPOSTE APERTE NON DATE ASSEGNANDOLE COME CORRETTE 
create function verifica_correzione_auto() returns trigger as
$$
declare
	c1 cursor for(select studente
				  from risposte
				  where rispostaa is null and verificacorrezione=FALSE);
				 
	res risposte%rowtype;
begin
	open c1;
		loop
			fetch c1 into res;
				  
			UPDATE RISPOSTE
			SET VERIFICACORREZIONE= NOT VERIFICACORREZIONE
			WHERE Studente=res.Studente;
		exit when not found;
		end loop;
		close c1;
	
return null;
end;
$$ language plpgsql;

CREATE TRIGGER verifica_auto
AFTER INSERT ON RISPOSTE
EXECUTE PROCEDURE verifica_correzione_auto();

--TRIGGER CHE ASSEGNA ALLE RISPOSTE DATE AI QUIZ M IL PUNTEGGIO
--OPPORTUNO VERIFICANDO LA CORRETTEZZA DELLA RISPOSTA
create function correzione_qm_auto() returns trigger as
$$
declare 
	c1 cursor for (select *
				   from appoggio_trigger);
	
	r appoggio_trigger%rowtype;
begin
	open c1;
		loop
			fetch c1 into r;
				if r.RispostaM=r.RispostaC THEN
					UPDATE RISPOSTE
					SET PuntiQM =r.PuntC
					WHERE Studente=r.Studente;
				else
					UPDATE RISPOSTE
					SET puntiQM=r.PuntS
					WHERE Studente=r.Studente;
				end if;
					exit when not found;
		end loop;
	close c1;
return null;
end;
$$ language plpgsql;

create trigger correzione_automatica_rqm
after insert on risposte
execute procedure correzione_qm_auto();

--PROCEDURE CHE CALCOLA IL PUNTEGGIO OTTENUTO AD UN TEST FORNENDO IL --NOME DELLO STUDENTE E IL NOME DEL TEST
create function punteggio_test(varchar,varchar) returns real as 
$$
declare
stud  alias for $1;
nomet  alias for $2;
matr int;
matr2 int;
punteggioqm real;
punteggioqa real;
risultato real;
begin
	SELECT idstudente into matr
	from studente
	where nome=stud;
	
	select studente into matr2
	from test_corretti
	where studente=matr;
	
	IF matr2 IS NULL THEN
		return NULL;
	ELSE
	SELECT sum(Puntiqm),sum(PunteggioAssegnato) into punteggioqm,punteggioqa
	from risposte as r,studente as s, test as t
	where   s.Nome=stud and s.idStudente=r.Studente and
		t.NomeTest=nomet and r.idTesT=t.idTest;
	END IF;	
		IF punteggioqa IS NULL THEN
			punteggioqa:=0;
		END IF;
		
		risultato:=punteggioqm+punteggioqa;
		
	return risultato;
end;
$$ language plpgsql;
